/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category InitProduct
 * @category generated
 */
export type InitProductInstructionArgs = {
  id: number[] /* size: 16 */
  productPrice: beet.bignum
}
/**
 * @category Instructions
 * @category InitProduct
 * @category generated
 */
export const initProductStruct = new beet.BeetArgsStruct<
  InitProductInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['id', beet.uniformFixedSizeArray(beet.u8, 16)],
    ['productPrice', beet.u64],
  ],
  'InitProductInstructionArgs'
)
/**
 * Accounts required by the _initProduct_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [_writable_] marketplace
 * @property [_writable_] product
 * @property [] paymentMint
 * @property [_writable_] accessMint (optional)
 * @property [_writable_] accessVault (optional)
 * @category Instructions
 * @category InitProduct
 * @category generated
 */
export type InitProductInstructionAccounts = {
  signer: web3.PublicKey
  marketplace: web3.PublicKey
  product: web3.PublicKey
  paymentMint: web3.PublicKey
  accessMint?: web3.PublicKey
  accessVault?: web3.PublicKey
  rent?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const initProductInstructionDiscriminator = [
  170, 237, 92, 232, 240, 86, 89, 222,
]

/**
 * Creates a _InitProduct_ instruction.
 *
 * Optional accounts that are not provided default to the program ID since
 * this was indicated in the IDL from which this instruction was generated.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitProduct
 * @category generated
 */
export function createInitProductInstruction(
  accounts: InitProductInstructionAccounts,
  args: InitProductInstructionArgs,
  programId = new web3.PublicKey('7KES27SK4AdZCCVj7nWgf5rUBFgyDMNSHEwgu7tvbnZW')
) {
  const [data] = initProductStruct.serialize({
    instructionDiscriminator: initProductInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.marketplace,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.product,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.paymentMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.accessMint ?? programId,
      isWritable: accounts.accessMint != null,
      isSigner: false,
    },
    {
      pubkey: accounts.accessVault ?? programId,
      isWritable: accounts.accessVault != null,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
